{"version":3,"sources":["components/Firebase.ts","components/FirebaseAuth.tsx","components/SignIn.tsx","components/SensorChart.tsx","components/Home.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","database","FirebaseAuth","state","isLoading","signedIn","_isMounted","this","onAuthStateChanged","user","setState","active","spinner","text","props","children","to","React","Component","SignIn","values","signInWithEmailAndPassword","email","password","then","res","history","push","catch","error","alert","initialValues","onSubmit","handleOnSubmit","validationSchema","Yup","shape","required","handleSubmit","handleChange","handleBlur","errors","touched","Form","FormGroup","Label","for","Input","type","name","id","value","onChange","onBlur","invalid","FormFeedback","Button","color","disabled","Spinner","size","hidden","withRouter","SensorChart","ref","child","orderByChild","limitToLast","on","snapshot","sensorData","val","className","sensorDataEntries","Object","entries","data","labels","map","timestamp","datasets","label","yAxisID","light","fill","lineTension","temperatureCelsius","options","scales","xAxes","time","displayFormats","minute","yAxes","position","scaleLabel","display","labelString","ticks","suggestedMin","suggestedMax","Home","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e99c400.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const auth = firebase.auth();\nexport const database = firebase.database();\n\nexport default firebase;\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport LoadingOverlay from 'react-loading-overlay';\nimport firebase from './Firebase';\n\ninterface State {\n  isLoading: boolean;\n  signedIn: boolean;\n}\n\nclass FirebaseAuth extends React.Component<{}, State> {\n  state: State = {\n    isLoading: true,\n    signedIn: false,\n  }\n\n  _isMounted: boolean = false;\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        if (this._isMounted) {\n          this.setState({\n            isLoading: false,\n            signedIn: true,\n          });\n        }\n      }\n      else {\n        if (this._isMounted) {\n          this.setState({\n            isLoading: false,\n            signedIn: false,\n          });\n        }\n      }\n    });\n  }\n  \n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return (\n        <LoadingOverlay\n          active={true}\n          spinner\n          text='Loading...'\n        >\n        </LoadingOverlay>\n      )\n    }\n\n    if (this.state.signedIn) {\n      return this.props.children;\n    } else {\n      return <Redirect to=\"/signin\" />\n    }\n  }\n}\n\nexport default FirebaseAuth;\n","import React from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router';\nimport { Button, Form, FormGroup, Label, Input, FormFeedback, Spinner } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nimport firebase from './Firebase';\n\ninterface Props extends RouteComponentProps {\n}\n\ninterface State {\n  isLoading: boolean;\n}\n\ninterface SignInInfo {\n  email: string;\n  password: string;\n}\n\nclass SignIn extends React.Component<Props, State> {\n  state: State = {\n    isLoading: true,\n  }\n\n  _isMounted: boolean = false;\n\n  handleOnSubmit(values: SignInInfo) {\n    if (this._isMounted) this.setState({isLoading: true});\n\n    firebase.auth().signInWithEmailAndPassword(values.email, values.password)\n      .then(res => {\n        this.props.history.push('/');\n        if (this._isMounted) this.setState({isLoading: false});\n      })\n      .catch(error => {\n        if (this._isMounted) this.setState({isLoading: false});\n        alert(error);\n      });\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.setState({\n          isLoading: false,\n        });\n      }\n      else {\n        this.setState({\n          isLoading: false,\n        });\n      }\n    });\n  }\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const initialValues: SignInInfo = { email: '', password: '' };\n\n    return (\n      <Formik\n        initialValues={initialValues}\n        onSubmit={(values) => this.handleOnSubmit(values)}\n        validationSchema={\n          Yup.object().shape({\n            email: Yup.string().email().required(),\n            password: Yup.string().required(),\n          })\n        }\n      >\n        {\n          ({handleSubmit, handleChange, handleBlur, values, errors, touched }) => (\n            <Form onSubmit={handleSubmit}>\n              <FormGroup>\n                <Label for=\"email\">Email</Label>\n                <Input\n                  type=\"email\"\n                  name=\"email\"\n                  id=\"email\"\n                  value={values.email}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  invalid={touched.email && errors.email ? true : false}\n                />\n                <FormFeedback>\n                  {errors.email}\n                </FormFeedback>\n              </FormGroup>\n\n              <FormGroup>\n                <Label for=\"password\">Password</Label>\n                <Input\n                  type=\"password\"\n                  name=\"password\"\n                  id=\"password\"\n                  value={values.password}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  invalid={touched.password && errors.password ? true : false}\n                />\n                <FormFeedback>\n                  {errors.password}\n                </FormFeedback>\n              </FormGroup>\n              \n              <Button color=\"primary\" type=\"submit\" disabled={this.state.isLoading}>\n                <Spinner size=\"sm\" color=\"light\" hidden={!this.state.isLoading} />\n                ログイン\n              </Button>\n\n            </Form>\n          )\n        }\n      </Formik>\n    );\n  }\n}\n\nexport default withRouter(SignIn);\n","import React from 'react';\nimport firebase from './Firebase';\nimport {Line} from 'react-chartjs-2';\nimport {ChartOptions} from 'chart.js';\nimport 'chartjs-plugin-colorschemes';\n\ninterface SensorData {\n  light: number;\n  temperature: number;\n  temperatureCelsius: number;\n  timestamp: number;\n}\n\ninterface State {\n  isLoading: boolean;\n  sensorData?: SensorData[];\n}\n\nclass SensorChart extends React.Component<{}, State> {\n  state: State = {\n    isLoading: true\n  }\n\n  componentDidMount() {\n    // DEVELOPER: check permission to read\n    firebase.database()\n      .ref('sensor')\n      .child('environment')\n      .orderByChild('timestamp')\n      .limitToLast(12)\n      .on('value', snapshot => {\n        let sensorData = snapshot.val();\n\n        this.setState({\n          isLoading: false,\n          sensorData: sensorData\n        });\n      });\n  }\n\n  render() {\n    let sensorData = this.state.sensorData;\n    if (! sensorData) {\n        return (\n          <div className=\"Loading\">\n            Loading...\n          </div>\n        );\n    }\n\n    // TODO: improve these codes\n    let sensorDataEntries = Object.entries(sensorData);\n    let timestampList = sensorDataEntries.map(([_, item]) => item.timestamp);\n    let lightList = sensorDataEntries.map(([_, item]) => item.light);\n    let temperatureList = sensorDataEntries.map(([_, item]) => item.temperatureCelsius);\n\n    let data: any = {\n      labels: timestampList,\n      datasets: [\n        {\n          label: '明るさ',\n          yAxisID: 'light',\n          data: lightList,\n          fill: true,\n          lineTension: false\n        },\n        {\n          label: '室温',\n          yAxisID: 'temperature',\n          data: temperatureList\n        }\n      ]\n    }\n    let options: ChartOptions = {\n      scales: {\n        xAxes: [{\n          type: 'time',\n          time: {\n            displayFormats: {\n              minute: 'HH:mm',\n            }\n          }\n        }],\n        yAxes: [{\n          id: 'light',\n          position: 'left',\n          scaleLabel: {\n            display: true,\n            labelString: '明るさ（電圧値≦1023）'\n          },\n          ticks: {\n            suggestedMin: 0,\n            suggestedMax: 1023\n          }\n        },{\n          id: 'temperature',\n          position: 'right',\n          scaleLabel: {\n            display: true,\n            labelString: '室温（摂氏）'\n          },\n          ticks: {\n            suggestedMin: 10,\n            suggestedMax: 30\n          }\n        }]\n      }\n    }\n\n    return (\n      <div className=\"SensorChart\">\n        <Line data={data} options={options} />\n      </div>\n    );\n  }\n}\n\nexport default SensorChart;\n","import React from 'react';\nimport SensorChart from './SensorChart';\n\nclass Home extends React.Component<{}, {}> {\n\n  componentDidMount() {\n  }\n\n  render() {\n    return (\n      <div className=\"Home\">\n        <SensorChart />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport FirebaseAuth from './FirebaseAuth';\nimport SignIn from './SignIn';\nimport Home from './Home';\nimport './App.css';\n\nclass App extends React.Component<{}, {}> {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/signin\" component={SignIn} />\n\n          <FirebaseAuth>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n            </Switch>\n          </FirebaseAuth>\n\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}